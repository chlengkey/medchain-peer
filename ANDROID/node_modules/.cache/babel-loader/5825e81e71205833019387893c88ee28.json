{"remainingRequest":"/home/skynet/Documents/MedicalChain/ANDROID/node_modules/babel-loader/lib/index.js!/home/skynet/Documents/MedicalChain/ANDROID/src/function.js","dependencies":[{"path":"/home/skynet/Documents/MedicalChain/ANDROID/src/function.js","mtime":1621415593271},{"path":"/home/skynet/Documents/MedicalChain/ANDROID/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/skynet/Documents/MedicalChain/ANDROID/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvaG9tZS9za3luZXQvRG9jdW1lbnRzL01lZGljYWxDaGFpbi9BTkRST0lEL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL2hvbWUvc2t5bmV0L0RvY3VtZW50cy9NZWRpY2FsQ2hhaW4vQU5EUk9JRC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwoKLy8gSW1wb3J0CnZhciBOb2RlUlNBID0gcmVxdWlyZSgnbm9kZS1yc2EnKTsKCmV4cG9ydCB2YXIgVlVFX0FQUF9BUEkgPSAiaHR0cDovLzEyNy4wLjAuMTo1MDAwIjsKZXhwb3J0IHZhciBjcnlwdG8gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIGNyeXB0bygpIHsKICAgIHZhciBwcml2YXRlS2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAiIjsKICAgIHZhciBwdWJsaWNLZXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICIiOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBjcnlwdG8pOwoKICAgIGlmIChwcml2YXRlS2V5ID09ICIiICYmIHB1YmxpY0tleSA9PSAiIikgewogICAgICB0aGlzWyJwcml2YXRlIl0gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJpdmF0ZScpOwogICAgICB0aGlzWyJwdWJsaWMiXSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwdWJsaWMnKTsKICAgIH0KCiAgICB0aGlzLmNyeXB0b0Z1bmMgPSBuZXcgTm9kZVJTQSh0aGlzWyJwcml2YXRlIl0pOwogIH0KCiAgX2NyZWF0ZUNsYXNzKGNyeXB0bywgW3sKICAgIGtleTogImdldFB1YmxpYyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UHVibGljKCkgewogICAgICByZXR1cm4gdGhpc1sicHVibGljIl07CiAgICB9CiAgfSwgewogICAga2V5OiAiZW5jcnlwdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZW5jcnlwdChtc2cpIHsKICAgICAgY29uc29sZS5sb2codGhpc1sicHVibGljIl0pOwogICAgICByZXR1cm4gdGhpcy5jcnlwdG9GdW5jLmVuY3J5cHQobXNnLCAnYmFzZTY0Jyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZGVjcnlwdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVjcnlwdChtc2cpIHsKICAgICAgcmV0dXJuIHRoaXMuY3J5cHRvRnVuYy5kZWNyeXB0KG1zZywgJ3V0Zi04Jyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZW5jcnlwdFByaXZhdGVLZXkiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGVuY3J5cHRQcml2YXRlS2V5KCkgewogICAgICB2YXIgYXBwID0gdGhpczsKICAgICAgcmV0dXJuIHRoaXMuZW5jcnlwdChhcHBbInByaXZhdGUiXSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZW5jcnlwdFVzaW5nUHVibGljS2V5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBlbmNyeXB0VXNpbmdQdWJsaWNLZXkocHVibGljS2V5LCBtc2cpIHsKICAgICAgdmFyIGNyeXB0b0luc3RhbmNlID0gbmV3IE5vZGVSU0EocHVibGljS2V5KTsKICAgICAgcmV0dXJuIGNyeXB0b0luc3RhbmNlLmVuY3J5cHQobXNnLCAnYmFzZTY0Jyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZW5jcnlwdFByaXZhdGVLZXlVc2luZ1B1YmxpYyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZW5jcnlwdFByaXZhdGVLZXlVc2luZ1B1YmxpYyhwdWJsaWNLZXkpIHsKICAgICAgdmFyIGNyeXB0b0luc3RhbmNlID0gbmV3IE5vZGVSU0EocHVibGljS2V5KTsKICAgICAgcmV0dXJuIGNyeXB0b0luc3RhbmNlLmVuY3J5cHQodGhpc1sicHJpdmF0ZSJdLCAnYmFzZTY0Jyk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gY3J5cHRvOwp9KCk7"},{"version":3,"sources":["/home/skynet/Documents/MedicalChain/ANDROID/src/function.js"],"names":["NodeRSA","require","VUE_APP_API","crypto","privateKey","publicKey","localStorage","getItem","cryptoFunc","msg","console","log","encrypt","decrypt","app","cryptoInstance"],"mappings":";;;AAAA;AACA,IAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,OAAO,IAAMC,WAAW,GAAG,uBAApB;AAEP,WAAaC,MAAb;AAEE,oBAAwC;AAAA,QAA5BC,UAA4B,uEAAjB,EAAiB;AAAA,QAAbC,SAAa,uEAAH,EAAG;;AAAA;;AACvC,QAAGD,UAAU,IAAI,EAAd,IAAoBC,SAAS,IAAI,EAApC,EAAuC;AACtC,wBAAeC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAf;AACC,uBAAeD,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAf;AACD;;AACA,SAAKC,UAAL,GAAkB,IAAIR,OAAJ,CAAY,eAAZ,CAAlB;AACD;;AARH;AAAA;AAAA,WAUE,qBAAW;AACV,aAAO,cAAP;AACA;AAZH;AAAA;AAAA,WAcE,iBAAQS,GAAR,EAAY;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,aAAO,KAAKH,UAAL,CAAgBI,OAAhB,CAAwBH,GAAxB,EAA6B,QAA7B,CAAP;AACA;AAjBH;AAAA;AAAA,WAmBE,iBAAQA,GAAR,EAAY;AACX,aAAO,KAAKD,UAAL,CAAgBK,OAAhB,CAAwBJ,GAAxB,EAA6B,OAA7B,CAAP;AACA;AArBH;AAAA;AAAA,WAuBE,6BAAmB;AAClB,UAAMK,GAAG,GAAG,IAAZ;AACA,aAAO,KAAKF,OAAL,CAAaE,GAAG,WAAhB,CAAP;AACA;AA1BH;AAAA;AAAA,WA4BE,+BAAsBT,SAAtB,EAAiCI,GAAjC,EAAqC;AACpC,UAAMM,cAAc,GAAG,IAAIf,OAAJ,CAAYK,SAAZ,CAAvB;AACA,aAAOU,cAAc,CAACH,OAAf,CAAuBH,GAAvB,EAA4B,QAA5B,CAAP;AACA;AA/BH;AAAA;AAAA,WAiCE,sCAA6BJ,SAA7B,EAAuC;AACtC,UAAMU,cAAc,GAAG,IAAIf,OAAJ,CAAYK,SAAZ,CAAvB;AACA,aAAOU,cAAc,CAACH,OAAf,CAAuB,eAAvB,EAAqC,QAArC,CAAP;AACA;AApCH;;AAAA;AAAA","sourcesContent":["// Import\nconst NodeRSA = require('node-rsa');\nexport const VUE_APP_API = \"http://127.0.0.1:5000\"\n\nexport class crypto {\n\n  constructor(privateKey=\"\", publicKey=\"\"){\n  \tif(privateKey == \"\" && publicKey == \"\"){\n  \t\tthis.private = localStorage.getItem('private');\n    \tthis.public  = localStorage.getItem('public');\n  \t}\n    this.cryptoFunc = new NodeRSA(this.private);\n  }\n\n  getPublic(){\n  \treturn this.public;\n  }\n  \n  encrypt(msg){\n  \tconsole.log(this.public);\n  \treturn this.cryptoFunc.encrypt(msg, 'base64');\n  }\n\n  decrypt(msg){\n  \treturn this.cryptoFunc.decrypt(msg, 'utf-8');\n  }\n\n  encryptPrivateKey(){\n  \tconst app = this;\n  \treturn this.encrypt(app.private);\n  }\n\n  encryptUsingPublicKey(publicKey, msg){\n  \tconst cryptoInstance = new NodeRSA(publicKey);\n  \treturn cryptoInstance.encrypt(msg, 'base64');\n  }\n\n  encryptPrivateKeyUsingPublic(publicKey){\n  \tconst cryptoInstance = new NodeRSA(publicKey);\n  \treturn cryptoInstance.encrypt(this.private, 'base64');\n  }\n  \n}"]}]}